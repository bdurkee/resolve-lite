Precis General_Tree_Theory;
    uses General_String_Theory,
         Str_Relativization_Ext,
         Basic_Natural_Number_Theory;

    Definition Is_Tree_Former(Tr : Cls, omega : Tr,
            Jn : Str(Tr) * El -> (Tr ~ {omega})) : B;

    Categorical Definition for Tr : Cls, omega : Tr,
            Jn : Str(Tr) * El -> (Tr ~ {omega}) is
        Is_Tree_Former(Tr, omega, Jn);

    /** node Count */
    Inductive Definition N_C(T : Tr) : N is
        (i.)  N_C(omega) = 0;
        (ii.) Forall x : Tr, Forall a : Str(T),
                N_C(Jn(a, x)) =
                    suc(Ag(N_C[[a]], +, 0));

    /** Is our guy a leaf? */
    Definition Is_Leaf(T : Tr) : B is
        Exists x : El,
        Exists a : Str({omega}),
            T = Jn(a, x);

    Definition Site : Cart_Prod Lab : El; LTS, RTS : Str(Tr); end;

    Implicit Definition Site_Reversal(S : Site) : Site is
        Site_Reversal(S.Lab) = S.Lab and Site_Reversal(S.LTS);


end General_Tree_Theory;