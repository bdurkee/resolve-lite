Precis General_Tree_Theory;
    uses General_String_Theory,
         Str_Relativization_Ext,
         Basic_Natural_Number_Theory;

    Definition Is_Tree_Former(Tr : Cls, omega : Tr,
            Jn : Str(Tr) * El -> (Tr ~ {omega})) : B;

    Categorical Definition for Tr : Cls, omega : Tr,
            Jn : Str(Tr) * El -> (Tr ~ {omega}) is
        Is_Tree_Former(Tr, omega, Jn);

    /** Node Count */
    Inductive Definition N_C(T : Tr) : N is
        (i.)  N_C(omega) = 0;
        (ii.) Forall x : Tr, Forall a : Str(T),
                N_C(Jn(a, x)) =
                    suc(Ag(N_C[[a]], +, 0));

    /*Inductive Definition T_Rev(T : Tr) : Tr(T) is
        (i.)  T_Rev(omega) = omega;
        (ii.) Forall x : Tr, Forall a : Str(T),
                             T_Rev(Jn(a, x)) = Jn((Reverse(T_Rev[[a]])), x);
                             */

    Definition Site : Cart_Prod Lab : El; LTS, RTS : Str(Tr); end;


    Definition Tr_Pos : Cart_Prod Path : Str(Site); Rem_Tr : Tr; end;

    Inductive Definition Zip(p : Str(Site), T : Tr) : Tr is
     (i.)  Zip(Empty_String, T) = T;
     (ii.) Forall S : Site, Zip(ext(p, S), T) = S.LTS;


end General_Tree_Theory;