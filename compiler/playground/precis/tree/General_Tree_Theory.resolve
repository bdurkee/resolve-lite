Precis General_Tree_Theory;
    uses General_String_Theory,
         Str_Relativization_Ext,
         Basic_Natural_Number_Theory;

    Definition Is_Tree_Former(TTr : Cls, omega : TTr,
            Jn : Str(TTr) * El -> (TTr ~ {omega})) : B;

    Categorical Definition for TTr : Cls, omega : TTr,
            Jn : Str(TTr) * El -> (TTr ~ {omega}) is
        Is_Tree_Former(TTr, omega, Jn);

    /** node count */
    Inductive Definition N_C(T : TTr) : N is
        (i.)  N_C(omega) = 0;
        (ii.) Forall x : TTr, Forall a : Str(T),
                N_C(Jn(a, x)) =
                    suc(Ag(N_C[[a]], +, 0));

    /** what does it mean to be a leaf? */
    Definition Is_Leaf(T : TTr) : B is
        Exists x : El,
        Exists a : Str({omega}),
            T = Jn(a, x);

    /** leaf count */
    Inductive Definition L_C(T : TTr) : N is
        (i.)  L_C(omega) = 0;
        (ii.) Forall x : TTr, Forall a : Str(T),
                L_C(Jn(a, x)) = {{1 if Is_Leaf(Jn(a, x));
                            Ag(L_C[[a]], +, 0) otherwise;}};

    Corollary Lf1: Forall T : TTr, (L_C(T) = 0 iff T = omega);
    Corollary Lf2: Forall T : TTr, (L_C(T) <= N_C(T));

    Inductive Definition T_Rev(T : TTr) : TTr is (i.) true; (ii.) true;

    Definition Site : Cart_Prod Lab : El; LTS, RTS : Str(TTr); end;

    Definition EStF_Tr : Powerset(TTr);

    Definition NL_Site
        : Cart_Prod
            Lab : El;
            LTS, RTS : Str(EStF_Tr);
        end;

    //implicit defns need to have a binding within that allows us to refer to the
    //symbol we're defining....
    Implicit Definition Site_Reversal(S : Site) : Site;
    //    Site_Reversal(S.Lab) = S.Lab and Site_Reversal(S.LTS);

    Definition Tr_Pos : Cart_Prod Path : Str(Site); Rem_Tr : TTr; end;

    Inductive Definition Zip(p : Str(Site), T : TTr) : TTr is
        (i.)  Zip(Empty_String, T) = T;
        (ii.) Forall S : Site,
            Zip(ext(p, S), T) = Zip(p, Jn(S.LTS, S.Lab));

    /** nested list position */
    Definition N_Lst_Pos : Cart_Prod
        Path : Str(NL_Site);
        Vis, Unvis : Str(TTr ~ {omega});
    end;

    /* a 'suturing' operation producing visited (VS) and unvisited (US) strings */
    Definition Suture(p : Str(Site), a, b : Str(TTr))
                        : Cart_Prod VS, US : Str(TTr); end;

    Definition Rt_Lab(T : TTr ~ {omega}) : El;

end General_Tree_Theory;