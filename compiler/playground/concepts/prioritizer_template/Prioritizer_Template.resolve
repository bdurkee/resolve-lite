Concept Prioritizer_Template(type Entry;
            evaluates Max_Capacity : Std_Ints :: Integer;
            Definition LEQV(x, y : Entry) : B;);
        uses Standard_Booleans, Standard_Integers,
            Basic_Integer_Theory, Basic_Natural_Number_Theory;

        requires Max_Capacity > 0
            which_entails Max_Capacity : N;

    Definition Total_Entry_Ct(K : Entry -> N) : N;

    Type family Entry_Keeper
                is modeled by Cart_Prod
                    Entry_Count : Entry -> N;
                    Accepting : B;
        end;
        exemplar K;
        constraints Total_Entry_Ct(K.Entry_Count) <= Max_Capacity;
        initialization
            ensures K.Accepting = true and
                Total_Entry_Ct(K.Entry_Count) = 0;

    Definition Is_Only_Addition(K1, K2 : Entry_Keeper, e : Entry) : B;

    Operation Add_Entry (updates K : Entry_Keeper; clears x : Entry);
        requires K.Entry_Count(x) < Max_Capacity and K.Accepting;
        ensures K.Accepting; //...

    Operation Change_Modes (updates K : Entry_Keeper);
        ensures K.Accepting = not(@K.Accepting) and
                K.Entry_Count = @K.Entry_Count;
end Prioritizer_Template;