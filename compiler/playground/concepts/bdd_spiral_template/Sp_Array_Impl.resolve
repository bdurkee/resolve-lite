Implementation Sp_Array_Impl for Bdd_Spiral_Template;

    Facility Arry_Fac is Bdd_Ceramic_Array_Template
            (Label, 1, Max_Length)
        externally
          implemented by Array_Impl;

    Type Spiral_Pos = Record
            Labl : Arry_Fac :: Ceramic_Array;
            Length, Curr_Place :
                Std_Ints :: Integer;
        end;
        conventions 0 < P.Curr_Place and
                   P.Curr_Place <= P.Length and
                   P.Length <= Max_Length
               which_entails
                        P.Curr_Place, P.Length : N;
        correspondence
            conc.P.Trmnl_Loc = SS(k)(Cen(k)) and
            conc.P.Curr_Loc = SS(k)(Cen(k)) and
            conc.P.Lab =
                lambda (q : Sp_Loc(k)).(
                    {{P.Labl(SCD(q))
                        if SCD(q) + 1 <= P.Length;
                      Label.base_point otherwise;}});
        initialization
            P.Length := 1;
            P.Curr_Place := 1;
        end;

    Procedure Lengthen (updates P : Spiral_Pos;
                        alters e : Label);
        Arry_Fac :: Swap_Entry(P.Labl, e, P.Length);
        P.Length := P.Length + 1;
    end Lengthen;

    Procedure Spiral_Out (updates P : Spiral_Pos);
        P.Curr_Place := P.Curr_Place + 1;
    end Spiral_Out;

    Procedure Spiral_In (updates P : Spiral_Pos);
        P.Curr_Place := P.Curr_Place - 1;
    end Spiral_In;

    Procedure Swap_Label (updates P : Spiral_Pos;
                          updates e : Label);
        Arry_Fac :: Swap_Entry(P.Labl, e, P.Curr_Place);
    end Swap_Label;

    Procedure Hop_Out (updates P : Spiral_Pos);
        P.Curr_Place :=  k * P.Curr_Place;
    end Hop_Out;

    Procedure Move_to_End (updates P : Spiral_Pos);
        P.Curr_Place := P.Length;
    end Move_to_End;

    Procedure Move_to_Center (updates P : Spiral_Pos);
        P.Curr_Place := 1;
    end Move_to_Center;

    Procedure Length_of (restores P : Spiral_Pos)
            : Std_Ints :: Integer;
        Length_of := P.Length;
    end Length_of;

    Procedure Curr_Ctr_Dist (restores P : Spiral_Pos)
            : Std_Ints :: Integer;
        Curr_Ctr_Dist := P.Curr_Place;
    end Curr_Ctr_Dist;

    Procedure At_Edge (restores P : Spiral_Pos)
            : Std_Bools :: Boolean;
        At_Edge := P.Curr_Place * k >= P.Length;
    end At_Edge;

    Procedure Clear (clears P : Spiral_Pos);
        P.Length := 0;
    end Clear;

end Sp_Array_Impl;