/*
 * [The "BSD license"]
 * Copyright (c) 2015 Clemson University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

ModuleFile(file, module) ::= <<
<fileHeader(file.resolveFileName, file.RESOLVEVersion)>
import org.resolvelite.runtime.*;
import java.lang.reflect.*;

<module>
>>

fileHeader(resolveFileName, RESOLVEVersion) ::= <<
/**
 * Generated from <resolveFileName> by RESOLVE
 * version <RESOLVEVersion>.
 */
>>

Concept(concept, types, funcs) ::= <<
public interface <concept.name> extends ResolveInterface {
    <types; separator="\n">
    <funcs; separator="\n">
}
>>

ConceptImpl(impl, funcImpls, repClasses) ::= <<
public class <impl.name> extends ResolveBase implements <impl.concept> {
    <repClasses; separator="\n">
    <funcImpls; separator="\n">
}
>>

initMethodDecl(type) ::= <%
public RType init<type.name>(
<if(toPrimitive.(type.name))><toPrimitive.(type.name)>
<else><type.name><endif>... e);
%>

FacilityImpl(impl, facilities, funcs) ::= <<
public class <impl.name> {
    <facilities; separator="\n">
    <funcs; separator="\n">
    <if(impl.definedMain)>
    public static void main(String[] args) {
        <impl.definedMain>();
    }
    <endif>
}
>>

TypeDecl(type) ::= <<
interface <type.name> extends RType { }
public RType init<type.name>(<\\>
<if(toPrimitive.(type.name))><toPrimitive.(type.name)>... e<endif>);
>>

ParameterDecl(param) ::= "RType <param.name>"

VariableDecl(var, init) ::= "RType <var.name> = <init>;"

FunctionDecl(func, params) ::= <<
public <if(func.isStatic)>static <endif><\\>
<if(func.hasReturn)>RType <else>void <endif><\\>
<func.name>(<params; separator=", ">);
>>

FunctionImpl(func, params, vars) ::= <<
<if(func.implementsOper)>@Override <endif><\\>
public <if(func.isStatic)>static <endif><\\>
<if(func.hasReturn)>RType <else>void <endif><\\>
<func.name>(<params; separator=", ">) {
    <vars; separator="\n">
}
>>

FacilityInstanceDecl(facility, root) ::= <<
public <if(facility.isStatic)>static <endif>final <facility.concept> <\\>
<if(stdFacQualMap.(facility.name))>INSTANCE<else><facility.name><endif> =
    <root>;
>>

LayeredFacilityInstantiation(init, args, child) ::= <%
<if(init.isProxied)><init.specRealizName>.createProxy<\\>
<else>new <init.specRealizName><endif>(<[args, child]; separator=",\n ">)
%>

MemberClassDef(clazz) ::= <<
class <clazz.name> extends ResolveBase implements RType {
    <clazz.name> rep;

    <clazz.name>() { rep = new <clazz.name>_Rep(); }

    @Override public Object getRep() { return rep; }

    @Override public void setRep(Object o) { rep = (<clazz.name>_Rep)o; }

    @Override public RType initialValue() { return new <clazz.name>(); }

    @Override public String toString() { return rep.toString(); }
}

class <clazz.name>_Rep {
    //representation member components declared here.
    <clazz.name>_Rep() {
        //initialize components here.
    }
    @Override public String toString() { return ""; }
}
>>

VariableNameRef(var, qualifier) ::= "<qualifier>.create<var.name>()"

LocallyDefinedTypeInit(init) ::= <%
<if(init.moduleQualifier)><init.moduleQualifier>.<endif>init<init.name>()%>

FacilityDefinedTypeInit(init, qualifier) ::= <<
<qualifier>.init<init.typeName>(<init.initialValue>)
>>

FacilityQualifier(q) ::= <%
((<q.facilitySpecName>)<if(stdFacQualMap.(q.facilityName))>
<stdFacQualMap.(q.facilityName)><else><q.facilityName><endif>)%>

toPrimitive ::= [
    "Boolean":"boolean",
    "Integer":"int"
]

stdFacQualMap ::= [
    "Std_Boolean_Fac":"Standard_Booleans.INSTANCE",
    "Std_Integer_Fac":"Standard_Integers.INSTANCE"
]

moduleFileExtension() ::= ".java"