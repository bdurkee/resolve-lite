/*
 * [The "BSD license"]
 * Copyright (c) 2015 Clemson University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

ModuleFile(file, module) ::= <<
<fileHeader(file.resolveFileName, file.RESOLVEVersion)>
import java.lang.reflect.*;

<module>
>>

fileHeader(resolveFileName, RESOLVEVersion) ::= <<
/**
 * Generated from <resolveFileName> by RESOLVE version <RESOLVEVersion>.
 * This file should not be modified.
 */
>>

ConceptModule(concept, types, funcs) ::= <<
public interface <concept.name> {
    <types; separator="\n">
    <funcs; separator="\n">
}
>>

EnhancementModule(enhancement, types, funcs) ::= <<
public interface <enhancement.name> extends <enhancement.concept> {
    <types; separator="\n">
    <funcs; separator="\n">
}
>>

ConceptImplModule(impl, ctor, funcImpls, repClasses, memberVars, facilityVars, opParams) ::= <<
public class <impl.name> implements <impl.concept> {
    <memberVars: {m|RType <m.var.name>;}; separator="\n">
    <opParams; separator="\n">
    <facilityVars: {f|<f.facility.concept> <f.facility.name>;}; separator="\n">
    <repClasses; separator="\n">
    <ctor>
    <funcImpls; separator="\n\n">
}
>>

EnhancementImplModule(impl, ctor, memberVars, repClasses, funcImpls, delegateMethods, opParams) ::= <<
public class <impl.name>
    implements
        <impl.enhancement>, <impl.concept>, InvocationHandler {
    <memberVars: {m|RType <m.var.name>;}; separator="\n">
    <impl.concept> delegate;

    <funcImpls; separator="\n">
    <delegateMethods; separator="\n">
    @Override public Object invoke(Object proxy, Method method,
            Object[] args) throws Throwable {
        return null;
    }
}
>>

OperationParameterDef(param, func) ::= <<
public <if(func.func.hasReturn)>RType<else>void<endif> <\\>
<func.func.name>(<func.params; separator=", ">) {
    <if(func.func.hasReturn)>return <endif><\\>
    ((OperationParameter)<func.func.name>).op<\\>
    (<func.func.params : {p|<p.name>};separator=", ">);
}
>>

FacilityImplModule(impl, facilities, funcImpls, repClasses) ::= <<
public class <impl.name> {
    <facilities; separator="\n">
    <repClasses; separator="\n">
    <funcImpls; separator="\n">
    <if(impl.definedMain)>
    public static void main(String[] args) {
        <impl.definedMain>();
    }
    <endif>
}
>>

CtorDef(ctor, facMems) ::= <<
public <ctor.name>(<ctor.members: {c|RType <c>}; separator=", ">) {
    <ctor.members: {c|this.<c> = <c>;}; separator="\n">
    <facMems: {f|this.<f.facility.name> = <f.root>;}; separator="\n">
}
>>

TypeInterfaceDef(type) ::= <<
interface <type.name> extends RType { }
public RType init<type.name>(<\\>
<if(toJavaPrimitive.(type.name))><toJavaPrimitive.(type.name)>... e<endif>);
>>

ParameterDef(param) ::= "RType <param.name>"

VariableDef(var, init) ::= "RType <var.name> = <init>;"

FunctionDef(func, params) ::= <<
public <if(func.isStatic)>static <endif><\\>
<if(func.hasReturn)>RType <else>void <endif><\\>
<func.name>(<params; separator=", ">);
>>

FunctionImpl(func, params, vars, stats) ::= <<
<if(func.implementsOper)>@Override <endif><\\>
public <if(func.isStatic)>static <endif><\\>
<if(func.hasReturn)>RType <else>void <endif><\\>
<func.name>(<params; separator=", ">) {
    <vars; separator="\n">
    <stats; separator="\n">
}
>>

ConceptDelegateMethod(method) ::= <<
@Override public <if(method.hasReturn)>RType <else>void <endif><method.name><\\>
(<method.parameters : {p | RType <p>}; separator=", ">) {
    <if(method.hasReturn)>return <endif>delegate.<method.name><\\>
    (<method.parameters; separator=", ">);
}
>>

FacilityDef(facility, root) ::= <<
public <if(facility.isStatic)>static <endif>final <facility.concept> <\\>
<if(toStdFacilityName.(facility.name))>INSTANCE<else><facility.name><endif> = <root>;
>>

DecoratedFacilityInstantiation(init, args, child) ::= <%
<if(init.isProxied)><init.specRealizName>.createProxy<\\>
<else>new <init.specRealizName><endif>(<[args, child]; separator=",\n ">)
%>

MemberClassDef(clazz, fields, initVars, initStats) ::= <<
<if(clazz.isStatic)>static <endif><\\>
class <clazz.name> implements RType {
    <clazz.name>_Rep rep;
    <clazz.name>() {
        rep = new <clazz.name>_Rep(this);
        rep.initialize(this);
    }

    @Override public Object getRep() {
        return rep;
    }

    @Override public void setRep(Object o) {
        rep = (<clazz.name>_Rep)o;
    }

    @Override public RType initialValue() {
        return new <clazz.name>();
    }

    @Override public String toString() {
        return rep.toString();
    }
}
<if(clazz.isStatic)>static <endif><\\>
class <clazz.name>_Rep {
    <fields: {f|RType <f.var.name>;}; separator="\n">
    <clazz.name>_Rep(<clazz.name> e) {
        <fields: {f|this.<f.var.name> = <f.init>;}; separator="\n">
    }

    private void initialize(<clazz.name> <clazz.referredToByExemplar>) {
        <initVars; separator="\n">
        <initStats; separator="\n">
    }

    @Override public String toString() {
        return <fields: {f|<f.var.name>.toString()}; separator="+">;
    }
}
public<if(clazz.isStatic)> static<endif> RType init<clazz.name>() {
    return new <clazz.name>();
}

public<if(clazz.isStatic)> static<endif> RType get<clazz.name>() {
    return init<clazz.name>();
}
>>

CallStat(call, q, args) ::= "<q>.<call.name>(<args; separator={, }>);"

ReturnStat(ret) ::= "return <ret.name>;"

WhileStat(while, cond, stats) ::= <<
while (((Boolean_Impl.Boolean)(<cond>)).rep.val) {
    <stats; separator="\n">
}
>>

MethodCall(call, q, args) ::= "<q>.<call.name>(<args; separator={, }>)"

VarNameRef(v) ::= "<v.name>"

MemberRef(ref, child) ::= <%
<if(ref.isBaseRef)>
((<ref.typeQualifier>.<ref.typeName>)<ref.name>)
<elseif(ref.isLastRef)>
(<child>).rep.<ref.name>
<else>
((<ref.typeQualifier>.<ref.typeName>)(<child>).rep.<ref.name>)
<endif>
%>

AnonOpParameterClassInstance(wrappedFunc, q) ::= <<
new OperationParameter() {
        @Override public RType op(RType... e) {
            <if(!wrappedFunc.hasReturn)><\\>
                <q>.<wrappedFunc.name>(<wrappedFunc.params: {p|e[<i0>]};separator=", ">);
                return null;
            <else>
                return <q>.<wrappedFunc.name><\\>
                (<wrappedFunc.params: {p|e[<i0>]};separator=", ">);
            <endif>
        }

        @Override public Object getRep() {
            throw new UnsupportedOperationException("getRep() shouldn't be "
                + "getting called from: " + this.getClass());
        }

        @Override public void setRep(Object setRep) {
            throw new UnsupportedOperationException("setRep() shouldn't be "
                + "getting called from: " + this.getClass());
        }

        @Override public RType initialValue() {
            throw new UnsupportedOperationException("initialValue() shouldn't"
                   + " be getting called from: " + this.getClass());
        }
    }
>>

TypeInit(init, q) ::= "<q>.init<init.typeName>(<init.initialValue>)"

FacilityQualifier(q) ::= <%
((<q.facilitySpecName>)<if(toStdFacilityName.(q.facilityName))>
<toStdFacilityName.(q.facilityName)><else><q.facilityName><endif>)%>

NormalQualifier(q) ::= "<q.name>"

toJavaPrimitive ::= [
    "Boolean":"boolean",
    "Integer":"int",
    "Character":"char",
    "Char_Str":"String"
]

toStdFacilityName ::= [
    "Std_Boolean_Fac":"Standard_Booleans.INSTANCE",
    "Std_Integer_Fac":"Standard_Integers.INSTANCE",
    "Std_Character_Fac":"Standard_Characters.INSTANCE",
    "Std_Char_Str_Fac":"Standard_Char_Strings.INSTANCE"
]

fileExtension() ::= ".java"