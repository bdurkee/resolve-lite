Concept Integer_Template;
    uses Basic_Integer_Theory, Standard_Booleans;

    Definition min_int : ℤ;
    Definition max_int : ℤ;
    constraints min_int ≤ 0 ∧ (1 ≤ max_int);

    Type family Integer is modeled by ℤ;
        exemplar I;
        constraints min_int ≤ I ≤ max_int;
        initialization 
                ensures I = 0;

    Operation Increment (updates i : Integer);
        requires i + 1 ≤ max_int;
        ensures i = (#i + 1);

    Operation Decrement (updates i : Integer);
        requires min_int ≤ (i - 1);
        ensures	i = (#i - 1);

    Operation Are_Equal (evaluates i, j : Integer) : Boolean;
        ensures Are_Equal = (i = j);

    Operation Are_Not_Equal (evaluates i, j : Integer) : Boolean;
        ensures Are_Not_Equal = (i ≠ j);

    Operation Negate (evaluates i : Integer) : Integer;
        requires min_int ≤ ⨩(i) ≤ max_int;
        ensures Negate = ⨩(i);

    Operation Less_Or_Equal (evaluates i, j : Integer) : Boolean;
        ensures Less_Or_Equal = (i ≤ j);

    Operation Less (evaluates i, j : Integer) : Boolean;
        ensures Less = (1 + i ≤ j);

    Operation Greater (evaluates i, j : Integer) : Boolean;
        ensures Greater = (1 + j ≤ i);

    Operation Greater_Or_Equal (evaluates i, j : Integer) : Boolean;
        ensures Greater_Or_Equal = (j ≤ i);

    Operation Sum (evaluates i, j : Integer) : Integer;
        requires min_int ≤ (i + j) ≤ max_int;
        ensures Sum = (i + j);

    Operation Difference (evaluates i, j : Integer) : Integer;
        requires min_int ≤ (i - j) ≤ max_int;
        ensures Difference = (i - j);

    Operation Product (evaluates i, j : Integer) : Integer;
        ensures (i Basic_Integer_Theory::+ j);

    Operation Mod (evaluates i, j : Integer) : Integer;
        ensures Mod = (i Basic_Integer_Theory::mod j);

    Operation Write (evaluates a : Integer);
    Operation Write_Line (evaluates a : Integer);

end Integer_Template;